import React, { useState } from "react";
import { replaceAll } from "./cleanup"; // A helper function.
import css from "./App.module.css";

function App() {
  /*
  The STATE of the APP:
        `enteredWord` > the text entered into the input field.
        `isLoading` > Whether an asynchronous process is taking a long time or not.
        `error` > A text message describing what the error is as generated by the fetch process.
        `definition` > The definition of the word fetched via the API.
        `exampleUsage` > An example Usage of the word fetched via the API.
  */
  const [enteredWord, setEnteredWord] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [definition, setDefinition] = useState("");
  const [exampleUsage, setExampleUsage] = useState("");

  // Sensitive information.
  // Despite researching https://create-react-app.dev/docs/adding-custom-environment-variables/ I struggle to do it the .env route.
  const API_KEY = "c18b7ece-4d56-4cc4-ac09-5f000de34c02";

  // Whenever the form is submitted, `fetchWordHandler` is invoked.
  // It is an asynchronous function.
  async function fetchWordHandler(event) {
    event.preventDefault(); // Prevent immediate refresh.
    setIsLoading(true); // Update State.
    setError(null); // Update State.
    try {
      // Throw error when searching for empty strings.
      if (enteredWord.trim().length === 0) {
        throw new Error("Cannot search for an empty string.");
      }
      // A String Literal is used to insert `enteredWord` and `API_KEY`.
      const response = await fetch(
        `https://www.dictionaryapi.com/api/v3/references/sd4/json/${enteredWord}?key=${API_KEY}`
      );
      // Set some logic for an unsuccessful response.
      if (!response.ok) {
        throw new Error(
          `Searching for ${enteredWord} resulted in an Unsuccessful Response.`
        );
      }

      // Parse the body text as JSON.
      const data = await response.json();

      // Some logic if the `enteredWord` does not exist in the dictionary.
      if (data[0]["def"] === undefined || data[0] === undefined) {
        throw new Error(`${enteredWord} does not exist in this dictionary.`);
      } else {
        // Safely proceed with extracting the Definition and Example Usage.
        let precursor = data[0]["def"][0]["sseq"][0][0][1]["dt"];

        // Set the definition.
        let def = replaceAll(precursor[0][1]);
        // Update State.
        setDefinition(def);

        let example_usage = "";
        if (precursor.length === 2) {
          // Example Usage does indeed exist.
          example_usage = replaceAll(precursor[1][1][0]["t"]);
        } else {
          // Example Usage does not exist for this word.
          example_usage = "";
        }
        // Update State.
        setExampleUsage(example_usage);
      }
      // If an error occurred, set it with setError.
      // We should see the error message displayed on the screen.
    } catch (error) {
      setError(error.message);
    }
    // At this stage data is not loading anymore.
    // We can safely revert `isLoading` back to `false`.
    setIsLoading(false);
  }

  // Whenever the input field is changed, this function is invoked.
  // It updates the `enteredWord`.
  const wordHandler = (event) => {
    setEnteredWord(event.target.value);
  };

  // As a fallback, let `content` be an empty paragraph.
  let content = <p></p>;

  // In the following "if/else-if/else" block, we define the `content` that should be displayed on the screen.
  // `content` may be viewed as the results/feedback from the API.
  // If the `definition` and `exampleUsage` are both valid.
  if (definition && exampleUsage) {
    content = (
      <>
        <p>
          <b>
            <u>Definition:</u>
          </b>{" "}
          {definition}
        </p>
        <p>
          <b>
            <u>Example Usage:</u>
          </b>{" "}
          {exampleUsage}
        </p>
      </>
    );
  }

  // If only the `definition` is valid.
  if (definition && !exampleUsage) {
    content = (
      <>
        <p>
          <b>
            <u>Definition:</u>
          </b>{" "}
          {definition}
        </p>
        <p>
          <i>(No example usage could be obtained for this word)</i>
        </p>
      </>
    );
  }

  // If an Error exists.
  if (error) {
    content = (
      <>
        <p>
          <b>Error:</b> {error}
        </p>
      </>
    );
  }

  // If `isLoading` is true.
  if (isLoading) {
    content = <p>Finding the definition...</p>;
  }

  // Our JSX component.
  return (
    // Container is a wrapper.
    <div className={css.Container}>
      <h1 className={css.Heading}>English Dictionary:</h1>

      {/*Form Content*/}
      <form onSubmit={fetchWordHandler}>
        <label htmlFor="word">
          <div className={css.Label}>
            Enter your word:
            <input
              className={css.Field}
              id="word"
              type="text"
              placeholder="Type text here"
              value={enteredWord}
              onChange={wordHandler}
            />
          </div>
        </label>
        {/*fetchWordHandler() will be executed if this button is clicked.*/}
        <button className={css.Button} type="submit">
          Search
        </button>
      </form>

      {/*A dedicated section for displaying the `content` variable.*/}
      <section className={css.Content}>{content}</section>
    </div>
  );
}

export default App;
